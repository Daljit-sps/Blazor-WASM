@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims

<div class="page">
    @if (isAuthenticated)
    {
        <div class="sidebar">
            <NavMenu />
        </div>
    }

    <main>
        @if (isAuthenticated)
        {
            <div class="top-row px-4 top-bar">
                <h6>
                    Welcome, @userName  <Tooltip Title="Logout" role="button" @onclick="Logout">
                        <Icon Name="IconName.BoxArrowRight" Size="IconSize.x5"></Icon>
                    </Tooltip>
                </h6>
               @*  <button class="btn btn-primary ms-4" @onclick="Logout">Logout</button> *@
            </div>
           
        }
        <div class="row justify-content-center align-items-center bodyDiv">
            <div class="col bg-light p-4">
                <CascadingValue Value="ChangeMainLayout">@Body</CascadingValue>
            </div>
        </div>
    </main>
</div>

    @code {
    public string? userName { get; set; }
    public bool isAuthenticated { get; set; }


    [Inject]
    public IAuthenticationService AuthenticationService { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    [Inject]
    protected AuthenticationStateProvider AuthenticationStateProvider { get; set; }


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        isAuthenticated = user.Identity.IsAuthenticated;
        ChangeMainLayout(isAuthenticated);
    }


    private async void ChangeMainLayout(bool isUserLoggedIn)
    {

        isAuthenticated = isUserLoggedIn;
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        isAuthenticated = user.Identity.IsAuthenticated;
        if (isAuthenticated)
        {
            userName = user.FindFirst("Name")?.Value;
        }
        StateHasChanged();
    }


    private async Task Logout()
    {
        NavigationManager.NavigateTo("/Logout");
    }

}
